@page "/"

@using MixedDbDistributionTask.Dashboard.ViewModels

@implements IDisposable
@inject DashboardViewModel ViewModel

<div class="w-100 h-100 d-flex flex-column justify-content-center align-items-center">
    <div class="w-50 d-flex flex-column justify-content-center align-items-center">
        <span class="mb-4">Hey, there! :)</span>
        @*         <div class="w-75 mb-4" style="border-bottom: 1px solid #888888;"></div> *@
    </div>

    @if (ViewModel.Introduction == null)
    {
        
    }
    else if (_showIntroduction)
    {
        <Intro Introduction="ViewModel.Introduction"/>
    }
    else
    {
        <div class="d-flex flex-column gap-2">
            @foreach (var tenant in ViewModel.AvailableTenants)
            {
                <span class="mylink">@tenant</span>
            }
        </div>
    }
</div>

@code {
    private bool _showIntroduction = false;

    protected override void OnInitialized()
    {
        ViewModel.DatabaseAvailabilityChanged += HandleDatabaseAvailabilityChanged;
        ViewModel.Introduction.Completed += HandleIntroductionCompleted;

        if (!ViewModel.Introduction.IsCompleted) { _showIntroduction = true; };
    }

    public void Dispose()
    {
        ViewModel.DatabaseAvailabilityChanged -= HandleDatabaseAvailabilityChanged;
        ViewModel.Introduction?.Completed -= HandleIntroductionCompleted;
    }

    private void HandleDebugDataCreation(bool create)
    {
        ViewModel.DismissDebugDataPrompt();

        if (create)
        {
            Task.Run(async () =>
            {
                await ViewModel.GenerateDebugData(1);
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void HandleIntroductionCompleted(object? sender, EventArgs args)
    {
        _showIntroduction = false;
        InvokeAsync(StateHasChanged);
    }

    private void HandleDatabaseAvailabilityChanged(object? sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged); //precaution for the "under discussion" multi-threaded blazor WASM; not needed as now
    }
}
